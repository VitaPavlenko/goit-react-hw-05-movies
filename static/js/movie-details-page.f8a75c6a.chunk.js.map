{"version":3,"file":"static/js/movie-details-page.f8a75c6a.chunk.js","mappings":"4PAmCA,EA/Ba,WACX,OAA4BA,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,UAERE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAsBH,GAAUI,KAAKL,KACpC,CAACC,IACJK,QAAQC,IAAIR,GAGZ,OACE,8BACGA,IACC,wBACGA,EAAOS,KAAKC,KAAI,SAAAC,GAAK,OACpB,0BACGA,EAAMC,cACL,gBAAKC,IARJ,kCAQkBF,EAAMC,aAAcE,MAAM,MAAMC,IAAI,MAEvD,gBAAKF,IAAKG,EAAKF,MAAM,MAAMC,IAAI,MAEjC,wBAAKJ,EAAMM,OACVN,EAAMO,YAAa,wCAAgBP,EAAMO,eAPnCP,EAAMQ,YCa3B,EA5BgB,WAAO,IAAD,EACpB,GAA6BpB,EAAAA,EAAAA,UAAS,MAAtC,eAAOqB,EAAP,KAAgBC,EAAhB,KACQnB,GAAaC,EAAAA,EAAAA,MAAbD,SAOR,OALAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAsBH,GAAUI,KAAKe,KACpC,CAACnB,IACJK,QAAQC,IAAIY,IAGV,gCACGA,IACC,wBACGA,EAAQE,QAAQZ,KAAI,SAAAa,GAAM,OACzB,2BACE,oCAAYA,EAAOA,WACnB,uBAAIA,EAAOC,YAFJD,EAAOJ,SAOQ,KAAtB,OAAPC,QAAO,IAAPA,GAAA,UAAAA,EAASE,eAAT,eAAkBG,UACjB,4EC8DR,EAjFyB,WAAO,IAAD,IACrBvB,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAO2B,EAAP,KAAcC,EAAd,KACA,GAAsBC,EAAAA,EAAAA,MAAdC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,KACPC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,OAKjB9B,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAsBH,GAAUI,KAAKqB,KACpC,CAACzB,IAEJK,QAAQC,IAAIkB,GAIZ,OACE,iCACE,mBAAQS,KAAK,SAASC,QAbL,WACnBL,EAAQM,KAAKJ,EAASK,MAAMC,OAY1B,qBAGA,kBACCb,IACC,gCACGA,EAAMc,eACL,gBACE3B,IAZG,kCAYWa,EAAMc,cACpBzB,IAAKW,EAAMe,kBAGb,gBAAK5B,IAAKG,EAAKD,IAAKW,EAAMe,kBAG5B,wBAAKf,EAAMe,kBACX,wCAAgBC,KAAKC,MAA4B,IAArBjB,EAAMkB,aAAsB,IAAxD,QACA,sCACA,uBAAIlB,EAAMmB,YACV,oCACA,wBACGnB,EAAMoB,OAAOpC,KAAI,SAAAqC,GAAG,OACnB,wBAAkBA,EAAI9B,MAAb8B,EAAI5B,UAGjB,oDACA,2BACE,yBACE,SAAC,KAAD,CACE6B,GAAI,CACFC,SAAS,GAAD,OAAKpB,EAAL,SACRS,MAAO,CAAEC,MAAM,UAAAN,EAASK,aAAT,eAAgBC,OAAQ,MAH3C,qBASF,yBACE,SAAC,KAAD,CACES,GAAI,CACFC,SAAS,GAAD,OAAKpB,EAAL,YACRS,MAAO,CAAEC,MAAM,UAAAN,EAASK,aAAT,eAAgBC,OAAQ,MAH3C,2BAUJ,SAAC,KAAD,CAAOT,KAAI,UAAKA,EAAL,SAAX,UACE,SAAC,EAAD,OAGF,SAAC,KAAD,CAAOA,KAAI,UAAKA,EAAL,YAAX,UACE,SAAC,EAAD,c,sLChFNoB,EAAW,+BAEXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCvB,EAAtC,+BAA4C,GAAIwB,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMzB,EAAKwB,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAuB,GAAD,OACxBF,EADwB,qCACaC,EADb,2BAKxB,SAASW,EAAYC,GAC1B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBACsBY,IAI9C,SAASC,EAAkB9D,GAChC,OAAOkD,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBhD,EAAtB,oBAA0CiD,IAGlE,SAASc,EAAkB/D,GAChC,OAAOkD,EAAuB,GAAD,OACxBF,EADwB,kBACNhD,EADM,4BACsBiD,IAI9C,SAASe,EAAkBhE,GAChC,OAAOkD,EAAuB,GAAD,OACxBF,EADwB,kBACNhD,EADM,4BACsBiD,M","sources":["components/Cast/Cast.js","components/Reviews/Reviews.js","page/MovieDetailsPage.js","services/api.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as api from '../../services/api';\nimport img from '../../img/img.png';\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    api.fetchMovieCredits(moviesId).then(setActors);\n  }, [moviesId]);\n  console.log(actors);\n\n  const imgUrl = 'https://image.tmdb.org/t/p/w400';\n  return (\n    <>\n      {actors && (\n        <ul>\n          {actors.cast.map(actor => (\n            <li key={actor.id}>\n              {actor.profile_path ? (\n                <img src={imgUrl + actor.profile_path} width=\"200\" alt=\"\"></img>\n              ) : (\n                <img src={img} width=\"200\" alt=\"\"></img>\n              )}\n              <h3>{actor.name}</h3>\n              {actor.character && <p>Character : {actor.character}</p>}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as api from '../../services/api';\n\nconst Reviews = () => {\n  const [authors, setAuthor] = useState(null);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    api.fetchMovieReviews(moviesId).then(setAuthor);\n  }, [moviesId]);\n  console.log(authors);\n\n  return (\n    <>\n      {authors && (\n        <ul>\n          {authors.results.map(author => (\n            <li key={author.id}>\n              <h3>Author:{author.author}</h3>\n              <p>{author.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {authors?.results?.length === 0 && (\n        <p>\"We don't have any reviews for this movie.\"</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import { useParams, Link, Route, useRouteMatch } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as api from '../services/api';\nimport Cast from '../components/Cast/Cast';\nimport Reviews from 'components/Reviews/Reviews';\nimport img from '../img/img.png';\nimport { useLocation, useHistory } from 'react-router-dom';\nconst MovieDetailsPage = () => {\n  const { moviesId } = useParams();\n  const [films, setFilms] = useState(null);\n  const { url, path } = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  const handleGoBack = () => {\n    history.push(location.state.from);\n  };\n  useEffect(() => {\n    api.fetchMovieDetails(moviesId).then(setFilms);\n  }, [moviesId]);\n\n  console.log(films);\n  //   const { backdrop_path, original_title } = films;\n  const imgUrl = 'https://image.tmdb.org/t/p/w400';\n\n  return (\n    <>\n      <button type=\"button\" onClick={handleGoBack}>\n        GoBack\n      </button>\n      <br />\n      {films && (\n        <>\n          {films.backdrop_path ? (\n            <img\n              src={imgUrl + films.backdrop_path}\n              alt={films.original_title}\n            />\n          ) : (\n            <img src={img} alt={films.original_title} />\n          )}\n\n          <h2>{films.original_title}</h2>\n          <p>User Score: {Math.round((films.vote_average * 100) / 10)}%</p>\n          <h3>overview</h3>\n          <p>{films.overview}</p>\n          <h3>Genres</h3>\n          <ul>\n            {films.genres.map(gen => (\n              <li key={gen.id}>{gen.name}</li>\n            ))}\n          </ul>\n          <h2>Additional information</h2>\n          <ul>\n            <li>\n              <Link\n                to={{\n                  pathname: `${url}/cast`,\n                  state: { from: location.state?.from || '/' },\n                }}\n              >\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link\n                to={{\n                  pathname: `${url}/reviews`,\n                  state: { from: location.state?.from || '/' },\n                }}\n              >\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <Route path={`${path}/cast`}>\n            <Cast />\n          </Route>\n\n          <Route path={`${path}/reviews`}>\n            <Reviews />\n          </Route>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","const BASE_URL = 'https://api.themoviedb.org/3';\n\nconst KEY = '04410cb9529346f79ec1f657731e9f8f';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/all/day?api_key=${KEY}&language=en-US&page=3`\n  );\n}\n\nexport function fetchSearch(newImput) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${newImput}`\n  );\n}\n\nexport function fetchMovieDetails(moviesId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${moviesId}?api_key=${KEY}`);\n}\n\nexport function fetchMovieCredits(moviesId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${moviesId}/credits?api_key=${KEY}`\n  );\n}\n\nexport function fetchMovieReviews(moviesId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${moviesId}/reviews?api_key=${KEY}`\n  );\n}\n"],"names":["useState","actors","setActors","moviesId","useParams","useEffect","api","then","console","log","cast","map","actor","profile_path","src","width","alt","img","name","character","id","authors","setAuthor","results","author","content","length","films","setFilms","useRouteMatch","url","path","history","useHistory","location","useLocation","type","onClick","push","state","from","backdrop_path","original_title","Math","round","vote_average","overview","genres","gen","to","pathname","BASE_URL","KEY","fetchWithErrorHandling","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearch","newImput","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}